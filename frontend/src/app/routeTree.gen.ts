/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as PublicRouteImport } from './routes/_public'
import { Route as AuthenticatedRouteImport } from './routes/_authenticated'
import { Route as IndexRouteImport } from './routes/index'
import { Route as PublicRegisterRouteImport } from './routes/_public/register'
import { Route as PublicLoginRouteImport } from './routes/_public/login'
import { Route as AuthenticatedWalletsRouteImport } from './routes/_authenticated/wallets'
import { Route as AuthenticatedDashboardRouteImport } from './routes/_authenticated/dashboard'
import { Route as AuthenticatedDashboardBobRouteImport } from './routes/_authenticated/dashboard.bob'
import { Route as AuthenticatedDashboardBibRouteImport } from './routes/_authenticated/dashboard.bib'

const PublicRoute = PublicRouteImport.update({
  id: '/_public',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthenticatedRoute = AuthenticatedRouteImport.update({
  id: '/_authenticated',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const PublicRegisterRoute = PublicRegisterRouteImport.update({
  id: '/register',
  path: '/register',
  getParentRoute: () => PublicRoute,
} as any)
const PublicLoginRoute = PublicLoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => PublicRoute,
} as any)
const AuthenticatedWalletsRoute = AuthenticatedWalletsRouteImport.update({
  id: '/wallets',
  path: '/wallets',
  getParentRoute: () => AuthenticatedRoute,
} as any)
const AuthenticatedDashboardRoute = AuthenticatedDashboardRouteImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => AuthenticatedRoute,
} as any)
const AuthenticatedDashboardBobRoute =
  AuthenticatedDashboardBobRouteImport.update({
    id: '/bob',
    path: '/bob',
    getParentRoute: () => AuthenticatedDashboardRoute,
  } as any)
const AuthenticatedDashboardBibRoute =
  AuthenticatedDashboardBibRouteImport.update({
    id: '/bib',
    path: '/bib',
    getParentRoute: () => AuthenticatedDashboardRoute,
  } as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/dashboard': typeof AuthenticatedDashboardRouteWithChildren
  '/wallets': typeof AuthenticatedWalletsRoute
  '/login': typeof PublicLoginRoute
  '/register': typeof PublicRegisterRoute
  '/dashboard/bib': typeof AuthenticatedDashboardBibRoute
  '/dashboard/bob': typeof AuthenticatedDashboardBobRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/dashboard': typeof AuthenticatedDashboardRouteWithChildren
  '/wallets': typeof AuthenticatedWalletsRoute
  '/login': typeof PublicLoginRoute
  '/register': typeof PublicRegisterRoute
  '/dashboard/bib': typeof AuthenticatedDashboardBibRoute
  '/dashboard/bob': typeof AuthenticatedDashboardBobRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/_authenticated': typeof AuthenticatedRouteWithChildren
  '/_public': typeof PublicRouteWithChildren
  '/_authenticated/dashboard': typeof AuthenticatedDashboardRouteWithChildren
  '/_authenticated/wallets': typeof AuthenticatedWalletsRoute
  '/_public/login': typeof PublicLoginRoute
  '/_public/register': typeof PublicRegisterRoute
  '/_authenticated/dashboard/bib': typeof AuthenticatedDashboardBibRoute
  '/_authenticated/dashboard/bob': typeof AuthenticatedDashboardBobRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/dashboard'
    | '/wallets'
    | '/login'
    | '/register'
    | '/dashboard/bib'
    | '/dashboard/bob'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/dashboard'
    | '/wallets'
    | '/login'
    | '/register'
    | '/dashboard/bib'
    | '/dashboard/bob'
  id:
    | '__root__'
    | '/'
    | '/_authenticated'
    | '/_public'
    | '/_authenticated/dashboard'
    | '/_authenticated/wallets'
    | '/_public/login'
    | '/_public/register'
    | '/_authenticated/dashboard/bib'
    | '/_authenticated/dashboard/bob'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AuthenticatedRoute: typeof AuthenticatedRouteWithChildren
  PublicRoute: typeof PublicRouteWithChildren
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_public': {
      id: '/_public'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof PublicRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_authenticated': {
      id: '/_authenticated'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthenticatedRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_public/register': {
      id: '/_public/register'
      path: '/register'
      fullPath: '/register'
      preLoaderRoute: typeof PublicRegisterRouteImport
      parentRoute: typeof PublicRoute
    }
    '/_public/login': {
      id: '/_public/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof PublicLoginRouteImport
      parentRoute: typeof PublicRoute
    }
    '/_authenticated/wallets': {
      id: '/_authenticated/wallets'
      path: '/wallets'
      fullPath: '/wallets'
      preLoaderRoute: typeof AuthenticatedWalletsRouteImport
      parentRoute: typeof AuthenticatedRoute
    }
    '/_authenticated/dashboard': {
      id: '/_authenticated/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof AuthenticatedDashboardRouteImport
      parentRoute: typeof AuthenticatedRoute
    }
    '/_authenticated/dashboard/bob': {
      id: '/_authenticated/dashboard/bob'
      path: '/bob'
      fullPath: '/dashboard/bob'
      preLoaderRoute: typeof AuthenticatedDashboardBobRouteImport
      parentRoute: typeof AuthenticatedDashboardRoute
    }
    '/_authenticated/dashboard/bib': {
      id: '/_authenticated/dashboard/bib'
      path: '/bib'
      fullPath: '/dashboard/bib'
      preLoaderRoute: typeof AuthenticatedDashboardBibRouteImport
      parentRoute: typeof AuthenticatedDashboardRoute
    }
  }
}

interface AuthenticatedDashboardRouteChildren {
  AuthenticatedDashboardBibRoute: typeof AuthenticatedDashboardBibRoute
  AuthenticatedDashboardBobRoute: typeof AuthenticatedDashboardBobRoute
}

const AuthenticatedDashboardRouteChildren: AuthenticatedDashboardRouteChildren =
  {
    AuthenticatedDashboardBibRoute: AuthenticatedDashboardBibRoute,
    AuthenticatedDashboardBobRoute: AuthenticatedDashboardBobRoute,
  }

const AuthenticatedDashboardRouteWithChildren =
  AuthenticatedDashboardRoute._addFileChildren(
    AuthenticatedDashboardRouteChildren,
  )

interface AuthenticatedRouteChildren {
  AuthenticatedDashboardRoute: typeof AuthenticatedDashboardRouteWithChildren
  AuthenticatedWalletsRoute: typeof AuthenticatedWalletsRoute
}

const AuthenticatedRouteChildren: AuthenticatedRouteChildren = {
  AuthenticatedDashboardRoute: AuthenticatedDashboardRouteWithChildren,
  AuthenticatedWalletsRoute: AuthenticatedWalletsRoute,
}

const AuthenticatedRouteWithChildren = AuthenticatedRoute._addFileChildren(
  AuthenticatedRouteChildren,
)

interface PublicRouteChildren {
  PublicLoginRoute: typeof PublicLoginRoute
  PublicRegisterRoute: typeof PublicRegisterRoute
}

const PublicRouteChildren: PublicRouteChildren = {
  PublicLoginRoute: PublicLoginRoute,
  PublicRegisterRoute: PublicRegisterRoute,
}

const PublicRouteWithChildren =
  PublicRoute._addFileChildren(PublicRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AuthenticatedRoute: AuthenticatedRouteWithChildren,
  PublicRoute: PublicRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
